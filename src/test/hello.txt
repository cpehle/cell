// this is a comment

mod my = {
  def hello(c : int) : int = {
    var a : int = 5
    var b : int = 7
    return a + b + c
  }

	def __init__() = {
		hello(5)
	}
}

/* EBNF
 
unit = { module_definition };
module_text = { (function_definition | variable_definition) };
function_text = { (variable_definition | statement | return_statement) };
return_statement = "return", expression;

module_definition = "mod", identifier, "=", "{", module_text "}";
function_definition = "def", identifier, "(" function_parameter_list, ")", ":", identifier, "=", "{",
    function_text, "}";
variable_definition = "var", identifier, ":", identifier, "=", rvalue;

statement = expression | function_call;
expression = expression, operator, expression
    | identifier
    | function_call
    | literal;
    
function_call = identifier, "(", {rvalue}, ")";

rvalue = literal | identifier | expression;


literal = number | string;
number = integer | float;
integer = "[1-9][0-9]*" | "0";
float = "[0-9]+.[0-9]+" | "[0-9]+.[0-9]+e-[0-9]+" | "[0-9]+.[0-9]+e[0-9]+";

identifier = "[a-zA-Z][a-zA-Z0-9_]*";

 * */

/** AST

 root
  |
  +-mod ( my )
    |
    +-def ( hello, int )
      |
      +-function_parameter_list
      | |
      | +-function_parameter ( c, int )
      |
      +-function_body
        |
        +-var ( a, int )
        | |
        | +-literal<integer> ( 5 )
        |
        +-var ( b, int )
        | |
        | +-literal<integer> ( 7 )
        |
        +-return_statement
          |
          +-expression ( + )
            |
            +-variable ( a )
            |
            +-expression ( + )
              |
              +-variable ( b )
              |
              +-variable ( c )
      
*/
