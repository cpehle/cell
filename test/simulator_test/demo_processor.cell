namespace seq


socket ram_if: {
    <= addr : int
    <= en : bool
    <= we : bool
    <= data_in : int
    => data_out : int
}


socket mc: {
    <= clk : bool
    <= reset : bool
    <> imem : ram_if
    <> dmem : ram_if
}

table Instruction -> int : {
    NOP = 0,
    ADD = 1,
    LOAD = 2,
    STORE = 3,
    JMP = 4,
    JMPZ = 5
}



mod processor <> mc: {

    inst pc : seq::ffr<int>
    inst op : seq::ffr<Instruction>
    inst a : seq::ff<int>
    inst b : seq::ff<int>


    process: {
        pc.clk = port.clk;
        pc.reset = port.reset;
        op.clk = port.clk;
        op.reset = port.reset;
        a.clk = port.clk;
        b.clk = port.clk;
        pc.reset_q = 0;
        op.reset_q = Instruction::NOP;
    }


    // address generation
    process: {
        pc.next = if( op.q == Instruction::JMP ) a.q else (pc.q + 1)
    }

    // instruction fetching
    process: {
        port.imem.addr = pc.q;
        port.imem.en = true;
        port.imem.we = false;
        op.next = port.imem.data_out;
    }

    // instruction decoding and execution
    process: {
        port.dmem.en = false;
        port.dmem.we = false;
        port.dmem.addr = a.q;
        port.dmem.data_in = b.q;

        if( op.q == Instruction::LOAD ) {
            port.dmem.en = true;
        }
    }

}

